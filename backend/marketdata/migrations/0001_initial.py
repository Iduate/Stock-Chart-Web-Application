# Generated by Django 4.2.24 on 2025-09-19 17:38

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('charts', '0004_alter_chartprediction_actual_price_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='MarketDataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='소스명')),
                ('code', models.CharField(choices=[('yahoo', 'Yahoo Finance'), ('alpha_vantage', 'Alpha Vantage'), ('twelve_data', 'Twelve Data'), ('finnhub', 'Finnhub'), ('polygon', 'Polygon.io')], max_length=20, unique=True, verbose_name='소스 코드')),
                ('api_key', models.CharField(blank=True, max_length=200, verbose_name='API 키')),
                ('base_url', models.URLField(verbose_name='기본 URL')),
                ('rate_limit_per_minute', models.IntegerField(default=60, verbose_name='분당 요청 제한')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성 상태')),
                ('priority', models.IntegerField(default=1, verbose_name='우선순위')),
            ],
            options={
                'verbose_name': '시장 데이터 소스',
                'verbose_name_plural': '시장 데이터 소스들',
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='NewsData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='제목')),
                ('content', models.TextField(verbose_name='내용')),
                ('source', models.CharField(max_length=200, verbose_name='출처')),
                ('author', models.CharField(blank=True, max_length=200, verbose_name='작성자')),
                ('published_at', models.DateTimeField(verbose_name='발행일')),
                ('url', models.URLField(verbose_name='원문 URL')),
                ('sentiment', models.CharField(blank=True, choices=[('positive', '긍정'), ('neutral', '중립'), ('negative', '부정')], max_length=20, null=True, verbose_name='감정')),
                ('sentiment_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, verbose_name='감정 점수')),
                ('views_count', models.IntegerField(default=0, verbose_name='조회수')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('stock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='charts.stock', verbose_name='관련 종목')),
            ],
            options={
                'verbose_name': '뉴스 데이터',
                'verbose_name_plural': '뉴스 데이터들',
                'ordering': ['-published_at'],
            },
        ),
        migrations.CreateModel(
            name='MarketStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('open', '개장'), ('closed', '휴장'), ('pre_market', '시간외 거래'), ('after_market', '시간외 거래')], max_length=20, verbose_name='상태')),
                ('next_open', models.DateTimeField(blank=True, null=True, verbose_name='다음 개장 시간')),
                ('next_close', models.DateTimeField(blank=True, null=True, verbose_name='다음 휴장 시간')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='업데이트 시간')),
                ('market', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='charts.market', verbose_name='시장')),
            ],
            options={
                'verbose_name': '시장 상태',
                'verbose_name_plural': '시장 상태들',
            },
        ),
        migrations.CreateModel(
            name='DataUpdateLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_type', models.CharField(choices=[('price', '가격 데이터'), ('news', '뉴스 데이터'), ('indicators', '기술적 지표'), ('market_status', '시장 상태')], max_length=20, verbose_name='업데이트 유형')),
                ('status', models.CharField(choices=[('success', '성공'), ('failed', '실패'), ('partial', '부분 성공')], max_length=20, verbose_name='상태')),
                ('records_processed', models.IntegerField(default=0, verbose_name='처리된 레코드 수')),
                ('error_message', models.TextField(blank=True, verbose_name='오류 메시지')),
                ('started_at', models.DateTimeField(verbose_name='시작 시간')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='완료 시간')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='marketdata.marketdatasource', verbose_name='데이터 소스')),
            ],
            options={
                'verbose_name': '데이터 업데이트 로그',
                'verbose_name_plural': '데이터 업데이트 로그들',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='TechnicalIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indicator_type', models.CharField(choices=[('sma', '단순이동평균'), ('ema', '지수이동평균'), ('rsi', 'RSI'), ('macd', 'MACD'), ('bollinger', '볼린저 밴드'), ('stoch', '스토캐스틱')], max_length=20, verbose_name='지표 유형')),
                ('timestamp', models.DateTimeField(verbose_name='시간')),
                ('value', models.JSONField(verbose_name='지표 값')),
                ('interval', models.CharField(choices=[('1m', '1분'), ('5m', '5분'), ('15m', '15분'), ('30m', '30분'), ('1h', '1시간'), ('4h', '4시간'), ('1d', '1일'), ('1w', '1주'), ('1M', '1월')], max_length=5, verbose_name='간격')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='charts.stock', verbose_name='종목')),
            ],
            options={
                'verbose_name': '기술적 지표',
                'verbose_name_plural': '기술적 지표들',
                'unique_together': {('stock', 'indicator_type', 'timestamp', 'interval')},
            },
        ),
        migrations.CreateModel(
            name='PriceData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(verbose_name='시간')),
                ('open_price', models.DecimalField(decimal_places=8, max_digits=15, verbose_name='시가')),
                ('high_price', models.DecimalField(decimal_places=8, max_digits=15, verbose_name='고가')),
                ('low_price', models.DecimalField(decimal_places=8, max_digits=15, verbose_name='저가')),
                ('close_price', models.DecimalField(decimal_places=8, max_digits=15, verbose_name='종가')),
                ('volume', models.BigIntegerField(verbose_name='거래량')),
                ('interval', models.CharField(choices=[('1m', '1분'), ('5m', '5분'), ('15m', '15분'), ('30m', '30분'), ('1h', '1시간'), ('4h', '4시간'), ('1d', '1일'), ('1w', '1주'), ('1M', '1월')], max_length=5, verbose_name='간격')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='marketdata.marketdatasource', verbose_name='데이터 소스')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='charts.stock', verbose_name='종목')),
            ],
            options={
                'verbose_name': '가격 데이터',
                'verbose_name_plural': '가격 데이터들',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['stock', 'timestamp'], name='marketdata__stock_i_7c247c_idx'), models.Index(fields=['stock', 'interval', 'timestamp'], name='marketdata__stock_i_24bd01_idx')],
                'unique_together': {('stock', 'timestamp', 'interval', 'source')},
            },
        ),
    ]
