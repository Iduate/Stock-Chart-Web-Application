# Generated by Django 4.2.7 on 2025-09-18 16:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(choices=[('card', '신용카드'), ('bank', '계좌이체'), ('vbank', '가상계좌'), ('phone', '휴대폰 결제'), ('kakaopay', '카카오페이'), ('naverpay', '네이버페이'), ('payco', '페이코'), ('samsung', '삼성페이'), ('lpay', 'LPAY'), ('ssgpay', 'SSG페이'), ('paypal', 'PayPal'), ('point', '포인트')], max_length=20, unique=True, verbose_name='결제수단 코드')),
                ('name', models.CharField(max_length=50, verbose_name='결제수단명')),
                ('icon', models.CharField(blank=True, max_length=100, verbose_name='아이콘 클래스')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화')),
                ('is_korean', models.BooleanField(default=True, verbose_name='한국 결제수단')),
                ('requires_identity_verification', models.BooleanField(default=False, verbose_name='본인인증 필요')),
                ('min_amount', models.IntegerField(default=100, verbose_name='최소 결제금액(원)')),
                ('max_amount', models.IntegerField(default=10000000, verbose_name='최대 결제금액(원)')),
                ('display_order', models.IntegerField(default=0, verbose_name='표시 순서')),
            ],
            options={
                'verbose_name': '결제 수단',
                'verbose_name_plural': '결제 수단 목록',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PaymentProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('iamport', 'Iamport (아임포트)'), ('toss', 'Toss Payments (토스페이먼츠)'), ('kakaopay', 'Kakao Pay (카카오페이)'), ('naverpay', 'Naver Pay (네이버페이)'), ('payco', 'PAYCO (페이코)'), ('kginicis', 'KG이니시스'), ('ksnet', 'KSNET'), ('settle', 'NHN 페이코'), ('nice', 'NICE정보통신'), ('danal', '다날'), ('mobilians', '모빌리언스'), ('paypal', 'PayPal'), ('stripe', 'Stripe')], max_length=50, unique=True, verbose_name='제공업체')),
                ('display_name', models.CharField(max_length=100, verbose_name='표시명')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화')),
                ('is_korean', models.BooleanField(default=True, verbose_name='한국 결제사')),
                ('api_key', models.CharField(blank=True, max_length=500, verbose_name='API 키')),
                ('secret_key', models.CharField(blank=True, max_length=500, verbose_name='비밀 키')),
                ('merchant_id', models.CharField(blank=True, max_length=100, verbose_name='가맹점 ID')),
                ('supports_card', models.BooleanField(default=True, verbose_name='신용카드 지원')),
                ('supports_bank', models.BooleanField(default=True, verbose_name='계좌이체 지원')),
                ('supports_vbank', models.BooleanField(default=True, verbose_name='가상계좌 지원')),
                ('supports_phone', models.BooleanField(default=False, verbose_name='휴대폰 결제 지원')),
                ('supports_point', models.BooleanField(default=False, verbose_name='포인트 결제 지원')),
                ('card_fee_rate', models.DecimalField(decimal_places=3, default=0.0, max_digits=5, verbose_name='신용카드 수수료율(%)')),
                ('bank_fee_rate', models.DecimalField(decimal_places=3, default=0.0, max_digits=5, verbose_name='계좌이체 수수료율(%)')),
                ('vbank_fee_amount', models.IntegerField(default=0, verbose_name='가상계좌 수수료(원)')),
                ('min_amount', models.IntegerField(default=100, verbose_name='최소 결제금액(원)')),
                ('max_amount', models.IntegerField(default=50000000, verbose_name='최대 결제금액(원)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
            ],
            options={
                'verbose_name': '결제 제공업체',
                'verbose_name_plural': '결제 제공업체 목록',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='거래 ID')),
                ('merchant_uid', models.CharField(max_length=100, unique=True, verbose_name='가맹점 주문번호')),
                ('amount', models.PositiveIntegerField(verbose_name='결제 금액(원)')),
                ('fee_amount', models.PositiveIntegerField(default=0, verbose_name='수수료(원)')),
                ('discount_amount', models.PositiveIntegerField(default=0, verbose_name='할인 금액(원)')),
                ('final_amount', models.PositiveIntegerField(verbose_name='최종 결제 금액(원)')),
                ('status', models.CharField(choices=[('pending', '결제 대기'), ('ready', '결제 준비'), ('paid', '결제 완료'), ('failed', '결제 실패'), ('cancelled', '결제 취소'), ('partial_cancelled', '부분 취소'), ('refunded', '환불 완료')], default='pending', max_length=20, verbose_name='결제 상태')),
                ('imp_uid', models.CharField(blank=True, max_length=100, verbose_name='결제사 거래번호')),
                ('pg_tid', models.CharField(blank=True, max_length=100, verbose_name='PG사 거래번호')),
                ('pg_provider', models.CharField(blank=True, max_length=50, verbose_name='PG사')),
                ('name', models.CharField(max_length=200, verbose_name='결제 상품명')),
                ('description', models.TextField(blank=True, verbose_name='결제 상품 설명')),
                ('buyer_name', models.CharField(max_length=50, verbose_name='구매자명')),
                ('buyer_email', models.EmailField(max_length=254, verbose_name='구매자 이메일')),
                ('buyer_tel', models.CharField(blank=True, max_length=20, verbose_name='구매자 연락처')),
                ('buyer_addr', models.CharField(blank=True, max_length=255, verbose_name='구매자 주소')),
                ('buyer_postcode', models.CharField(blank=True, max_length=10, verbose_name='구매자 우편번호')),
                ('payment_details', models.JSONField(blank=True, default=dict, verbose_name='결제 상세 정보')),
                ('vbank_num', models.CharField(blank=True, max_length=50, verbose_name='가상계좌 번호')),
                ('vbank_name', models.CharField(blank=True, max_length=50, verbose_name='가상계좌 은행명')),
                ('vbank_holder', models.CharField(blank=True, max_length=50, verbose_name='가상계좌 예금주')),
                ('vbank_date', models.DateTimeField(blank=True, null=True, verbose_name='가상계좌 입금기한')),
                ('card_name', models.CharField(blank=True, max_length=50, verbose_name='카드사명')),
                ('card_number', models.CharField(blank=True, max_length=20, verbose_name='카드번호(마스킹)')),
                ('card_quota', models.IntegerField(blank=True, null=True, verbose_name='할부개월수')),
                ('paid_at', models.DateTimeField(blank=True, null=True, verbose_name='결제 완료일')),
                ('cancelled_at', models.DateTimeField(blank=True, null=True, verbose_name='취소일')),
                ('failed_at', models.DateTimeField(blank=True, null=True, verbose_name='실패일')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='korean_payments.paymentmethod', verbose_name='결제 수단')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='korean_payments.paymentprovider', verbose_name='결제 제공업체')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '결제 거래',
                'verbose_name_plural': '결제 거래 목록',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentWebhook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('webhook_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='웹훅 ID')),
                ('event_type', models.CharField(max_length=50, verbose_name='이벤트 타입')),
                ('imp_uid', models.CharField(blank=True, max_length=100, verbose_name='결제사 거래번호')),
                ('merchant_uid', models.CharField(blank=True, max_length=100, verbose_name='가맹점 주문번호')),
                ('raw_data', models.JSONField(verbose_name='원본 웹훅 데이터')),
                ('headers', models.JSONField(default=dict, verbose_name='HTTP 헤더')),
                ('is_processed', models.BooleanField(default=False, verbose_name='처리 완료')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='처리일')),
                ('error_message', models.TextField(blank=True, verbose_name='오류 메시지')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='수신일')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='korean_payments.paymentprovider', verbose_name='결제 제공업체')),
                ('transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='korean_payments.paymenttransaction', verbose_name='연결된 거래')),
            ],
            options={
                'verbose_name': '결제 웹훅',
                'verbose_name_plural': '결제 웹훅 목록',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentRefund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('refund_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='환불 ID')),
                ('amount', models.PositiveIntegerField(verbose_name='환불 금액(원)')),
                ('reason', models.CharField(choices=[('user_request', '사용자 요청'), ('service_issue', '서비스 이슈'), ('payment_error', '결제 오류'), ('duplicate_payment', '중복 결제'), ('other', '기타')], max_length=20, verbose_name='환불 사유')),
                ('reason_detail', models.TextField(blank=True, verbose_name='환불 사유 상세')),
                ('status', models.CharField(choices=[('requested', '환불 요청'), ('processing', '환불 처리중'), ('completed', '환불 완료'), ('failed', '환불 실패'), ('rejected', '환불 거부')], default='requested', max_length=20, verbose_name='환불 상태')),
                ('imp_uid', models.CharField(blank=True, max_length=100, verbose_name='환불 거래번호')),
                ('requested_at', models.DateTimeField(auto_now_add=True, verbose_name='요청일')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='처리일')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='완료일')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_refunds', to=settings.AUTH_USER_MODEL, verbose_name='처리자')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='requested_refunds', to=settings.AUTH_USER_MODEL, verbose_name='요청자')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='korean_payments.paymenttransaction', verbose_name='원본 거래')),
            ],
            options={
                'verbose_name': '결제 환불',
                'verbose_name_plural': '결제 환불 목록',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.AddField(
            model_name='paymentmethod',
            name='providers',
            field=models.ManyToManyField(blank=True, to='korean_payments.paymentprovider', verbose_name='지원 제공업체'),
        ),
        migrations.CreateModel(
            name='PaymentConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(default='StockChart', max_length=100, verbose_name='사이트명')),
                ('company_name', models.CharField(default='StockChart Inc.', max_length=100, verbose_name='회사명')),
                ('business_number', models.CharField(blank=True, max_length=20, verbose_name='사업자등록번호')),
                ('min_payment_amount', models.IntegerField(default=1000, verbose_name='최소 결제금액(원)')),
                ('max_payment_amount', models.IntegerField(default=10000000, verbose_name='최대 결제금액(원)')),
                ('auto_refund_enabled', models.BooleanField(default=False, verbose_name='자동 환불 허용')),
                ('refund_deadline_days', models.IntegerField(default=7, verbose_name='환불 신청 기한(일)')),
                ('send_payment_notification', models.BooleanField(default=True, verbose_name='결제 완료 알림 발송')),
                ('send_refund_notification', models.BooleanField(default=True, verbose_name='환불 완료 알림 발송')),
                ('admin_notification_email', models.EmailField(blank=True, max_length=254, verbose_name='관리자 알림 이메일')),
                ('send_admin_notification', models.BooleanField(default=True, verbose_name='관리자 알림 발송')),
                ('test_mode', models.BooleanField(default=True, verbose_name='테스트 모드')),
                ('webhook_verification_enabled', models.BooleanField(default=True, verbose_name='웹훅 검증 활성화')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('default_provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='korean_payments.paymentprovider', verbose_name='기본 결제 제공업체')),
            ],
            options={
                'verbose_name': '결제 설정',
                'verbose_name_plural': '결제 설정',
            },
        ),
    ]
